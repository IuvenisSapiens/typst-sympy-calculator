# Generated from TypstGrammar.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,39,413,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,1,0,1,0,1,0,1,1,1,1,1,1,1,
        1,1,1,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,
        5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,
        8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,
        9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,4,10,153,8,10,11,10,12,
        10,154,1,10,1,10,1,11,1,11,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,
        14,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,19,1,19,1,
        19,1,19,3,19,183,8,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,
        24,1,24,1,25,1,25,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,27,1,
        27,1,27,1,27,1,27,3,27,210,8,27,1,28,1,28,1,29,1,29,1,29,3,29,217,
        8,29,1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,
        1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,32,1,32,1,32,
        1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,
        1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,
        1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,34,
        1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,
        1,35,1,35,1,35,1,35,1,36,1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,37,
        1,37,1,37,1,37,1,37,1,38,1,38,1,38,1,38,1,39,1,39,1,39,1,39,1,39,
        1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,
        1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,41,
        4,41,348,8,41,11,41,12,41,349,1,41,1,41,1,41,1,41,1,41,5,41,357,
        8,41,10,41,12,41,360,9,41,1,41,5,41,363,8,41,10,41,12,41,366,9,41,
        1,41,1,41,1,41,1,41,1,41,5,41,373,8,41,10,41,12,41,376,9,41,1,41,
        1,41,5,41,380,8,41,10,41,12,41,383,9,41,3,41,385,8,41,1,42,3,42,
        388,8,42,1,42,1,42,1,42,5,42,393,8,42,10,42,12,42,396,9,42,1,42,
        1,42,1,42,1,42,5,42,402,8,42,10,42,12,42,405,9,42,5,42,407,8,42,
        10,42,12,42,410,9,42,1,42,1,42,0,0,43,1,1,3,2,5,3,7,4,9,0,11,0,13,
        0,15,0,17,5,19,6,21,7,23,8,25,9,27,10,29,11,31,12,33,13,35,14,37,
        15,39,16,41,17,43,18,45,19,47,20,49,21,51,22,53,23,55,24,57,25,59,
        26,61,27,63,28,65,29,67,30,69,31,71,32,73,33,75,34,77,35,79,36,81,
        37,83,38,85,39,1,0,8,3,0,9,10,13,13,32,32,1,0,48,57,2,0,65,90,97,
        122,2,0,38,38,92,92,2,0,60,60,62,62,2,0,43,43,45,45,2,0,42,42,47,
        47,2,0,33,33,37,37,428,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,
        0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,
        0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,
        0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,
        0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,
        0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,
        0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,
        0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,
        0,0,0,1,87,1,0,0,0,3,90,1,0,0,0,5,95,1,0,0,0,7,100,1,0,0,0,9,107,
        1,0,0,0,11,109,1,0,0,0,13,111,1,0,0,0,15,113,1,0,0,0,17,115,1,0,
        0,0,19,134,1,0,0,0,21,152,1,0,0,0,23,158,1,0,0,0,25,162,1,0,0,0,
        27,164,1,0,0,0,29,166,1,0,0,0,31,168,1,0,0,0,33,170,1,0,0,0,35,172,
        1,0,0,0,37,174,1,0,0,0,39,182,1,0,0,0,41,184,1,0,0,0,43,186,1,0,
        0,0,45,188,1,0,0,0,47,190,1,0,0,0,49,192,1,0,0,0,51,194,1,0,0,0,
        53,196,1,0,0,0,55,209,1,0,0,0,57,211,1,0,0,0,59,216,1,0,0,0,61,218,
        1,0,0,0,63,220,1,0,0,0,65,240,1,0,0,0,67,260,1,0,0,0,69,278,1,0,
        0,0,71,295,1,0,0,0,73,299,1,0,0,0,75,303,1,0,0,0,77,312,1,0,0,0,
        79,316,1,0,0,0,81,321,1,0,0,0,83,384,1,0,0,0,85,387,1,0,0,0,87,88,
        5,94,0,0,88,89,5,84,0,0,89,2,1,0,0,0,90,91,5,94,0,0,91,92,5,116,
        0,0,92,93,5,111,0,0,93,94,5,112,0,0,94,4,1,0,0,0,95,96,5,94,0,0,
        96,97,5,40,0,0,97,98,5,84,0,0,98,99,5,41,0,0,99,6,1,0,0,0,100,101,
        5,94,0,0,101,102,5,40,0,0,102,103,5,116,0,0,103,104,5,111,0,0,104,
        105,5,112,0,0,105,106,5,41,0,0,106,8,1,0,0,0,107,108,7,0,0,0,108,
        10,1,0,0,0,109,110,7,1,0,0,110,12,1,0,0,0,111,112,7,2,0,0,112,14,
        1,0,0,0,113,114,5,35,0,0,114,16,1,0,0,0,115,116,5,60,0,0,116,117,
        5,116,0,0,117,118,5,121,0,0,118,119,5,112,0,0,119,120,5,115,0,0,
        120,121,5,116,0,0,121,122,5,95,0,0,122,123,5,109,0,0,123,124,5,97,
        0,0,124,125,5,116,0,0,125,126,5,104,0,0,126,127,5,95,0,0,127,128,
        5,115,0,0,128,129,5,116,0,0,129,130,5,97,0,0,130,131,5,114,0,0,131,
        132,5,116,0,0,132,133,5,62,0,0,133,18,1,0,0,0,134,135,5,60,0,0,135,
        136,5,116,0,0,136,137,5,121,0,0,137,138,5,112,0,0,138,139,5,115,
        0,0,139,140,5,116,0,0,140,141,5,95,0,0,141,142,5,109,0,0,142,143,
        5,97,0,0,143,144,5,116,0,0,144,145,5,104,0,0,145,146,5,95,0,0,146,
        147,5,101,0,0,147,148,5,110,0,0,148,149,5,100,0,0,149,150,5,62,0,
        0,150,20,1,0,0,0,151,153,3,9,4,0,152,151,1,0,0,0,153,154,1,0,0,0,
        154,152,1,0,0,0,154,155,1,0,0,0,155,156,1,0,0,0,156,157,6,10,0,0,
        157,22,1,0,0,0,158,159,7,3,0,0,159,160,1,0,0,0,160,161,6,11,0,0,
        161,24,1,0,0,0,162,163,5,40,0,0,163,26,1,0,0,0,164,165,5,41,0,0,
        165,28,1,0,0,0,166,167,5,123,0,0,167,30,1,0,0,0,168,169,5,125,0,
        0,169,32,1,0,0,0,170,171,5,91,0,0,171,34,1,0,0,0,172,173,5,93,0,
        0,173,36,1,0,0,0,174,175,5,124,0,0,175,38,1,0,0,0,176,177,5,34,0,
        0,177,178,5,124,0,0,178,183,5,34,0,0,179,180,5,98,0,0,180,181,5,
        97,0,0,181,183,5,114,0,0,182,176,1,0,0,0,182,179,1,0,0,0,183,40,
        1,0,0,0,184,185,5,34,0,0,185,42,1,0,0,0,186,187,5,95,0,0,187,44,
        1,0,0,0,188,189,5,94,0,0,189,46,1,0,0,0,190,191,5,59,0,0,191,48,
        1,0,0,0,192,193,5,44,0,0,193,50,1,0,0,0,194,195,5,46,0,0,195,52,
        1,0,0,0,196,197,5,45,0,0,197,198,5,62,0,0,198,54,1,0,0,0,199,210,
        5,61,0,0,200,201,5,61,0,0,201,210,5,61,0,0,202,203,5,33,0,0,203,
        210,5,61,0,0,204,210,7,4,0,0,205,206,5,60,0,0,206,210,5,61,0,0,207,
        208,5,62,0,0,208,210,5,61,0,0,209,199,1,0,0,0,209,200,1,0,0,0,209,
        202,1,0,0,0,209,204,1,0,0,0,209,205,1,0,0,0,209,207,1,0,0,0,210,
        56,1,0,0,0,211,212,7,5,0,0,212,58,1,0,0,0,213,217,7,6,0,0,214,215,
        5,92,0,0,215,217,5,47,0,0,216,213,1,0,0,0,216,214,1,0,0,0,217,60,
        1,0,0,0,218,219,7,7,0,0,219,62,1,0,0,0,220,221,5,60,0,0,221,222,
        5,116,0,0,222,223,5,121,0,0,223,224,5,112,0,0,224,225,5,115,0,0,
        225,226,5,116,0,0,226,227,5,95,0,0,227,228,5,109,0,0,228,229,5,97,
        0,0,229,230,5,116,0,0,230,231,5,104,0,0,231,232,5,95,0,0,232,233,
        5,97,0,0,233,234,5,99,0,0,234,235,5,99,0,0,235,236,5,101,0,0,236,
        237,5,110,0,0,237,238,5,116,0,0,238,239,5,62,0,0,239,64,1,0,0,0,
        240,241,5,60,0,0,241,242,5,116,0,0,242,243,5,121,0,0,243,244,5,112,
        0,0,244,245,5,115,0,0,245,246,5,116,0,0,246,247,5,95,0,0,247,248,
        5,109,0,0,248,249,5,97,0,0,249,250,5,116,0,0,250,251,5,104,0,0,251,
        252,5,95,0,0,252,253,5,114,0,0,253,254,5,101,0,0,254,255,5,100,0,
        0,255,256,5,117,0,0,256,257,5,99,0,0,257,258,5,101,0,0,258,259,5,
        62,0,0,259,66,1,0,0,0,260,261,5,60,0,0,261,262,5,116,0,0,262,263,
        5,121,0,0,263,264,5,112,0,0,264,265,5,115,0,0,265,266,5,116,0,0,
        266,267,5,95,0,0,267,268,5,109,0,0,268,269,5,97,0,0,269,270,5,116,
        0,0,270,271,5,104,0,0,271,272,5,95,0,0,272,273,5,102,0,0,273,274,
        5,117,0,0,274,275,5,110,0,0,275,276,5,99,0,0,276,277,5,62,0,0,277,
        68,1,0,0,0,278,279,5,60,0,0,279,280,5,116,0,0,280,281,5,121,0,0,
        281,282,5,112,0,0,282,283,5,115,0,0,283,284,5,116,0,0,284,285,5,
        95,0,0,285,286,5,109,0,0,286,287,5,97,0,0,287,288,5,116,0,0,288,
        289,5,104,0,0,289,290,5,95,0,0,290,291,5,109,0,0,291,292,5,97,0,
        0,292,293,5,116,0,0,293,294,5,62,0,0,294,70,1,0,0,0,295,296,5,108,
        0,0,296,297,5,105,0,0,297,298,5,109,0,0,298,72,1,0,0,0,299,300,5,
        108,0,0,300,301,5,111,0,0,301,302,5,103,0,0,302,74,1,0,0,0,303,304,
        5,105,0,0,304,305,5,110,0,0,305,306,5,116,0,0,306,307,5,101,0,0,
        307,308,5,103,0,0,308,309,5,114,0,0,309,310,5,97,0,0,310,311,5,108,
        0,0,311,76,1,0,0,0,312,313,5,100,0,0,313,314,5,105,0,0,314,315,5,
        102,0,0,315,78,1,0,0,0,316,317,5,100,0,0,317,318,5,105,0,0,318,319,
        5,102,0,0,319,320,5,102,0,0,320,80,1,0,0,0,321,322,5,60,0,0,322,
        323,5,116,0,0,323,324,5,121,0,0,324,325,5,112,0,0,325,326,5,115,
        0,0,326,327,5,116,0,0,327,328,5,95,0,0,328,329,5,109,0,0,329,330,
        5,97,0,0,330,331,5,116,0,0,331,332,5,104,0,0,332,333,5,95,0,0,333,
        334,5,115,0,0,334,335,5,121,0,0,335,336,5,109,0,0,336,337,5,98,0,
        0,337,338,5,111,0,0,338,339,5,108,0,0,339,340,5,95,0,0,340,341,5,
        98,0,0,341,342,5,97,0,0,342,343,5,115,0,0,343,344,5,101,0,0,344,
        345,5,62,0,0,345,82,1,0,0,0,346,348,3,11,5,0,347,346,1,0,0,0,348,
        349,1,0,0,0,349,347,1,0,0,0,349,350,1,0,0,0,350,358,1,0,0,0,351,
        352,3,49,24,0,352,353,3,11,5,0,353,354,3,11,5,0,354,355,3,11,5,0,
        355,357,1,0,0,0,356,351,1,0,0,0,357,360,1,0,0,0,358,356,1,0,0,0,
        358,359,1,0,0,0,359,385,1,0,0,0,360,358,1,0,0,0,361,363,3,11,5,0,
        362,361,1,0,0,0,363,366,1,0,0,0,364,362,1,0,0,0,364,365,1,0,0,0,
        365,374,1,0,0,0,366,364,1,0,0,0,367,368,3,49,24,0,368,369,3,11,5,
        0,369,370,3,11,5,0,370,371,3,11,5,0,371,373,1,0,0,0,372,367,1,0,
        0,0,373,376,1,0,0,0,374,372,1,0,0,0,374,375,1,0,0,0,375,377,1,0,
        0,0,376,374,1,0,0,0,377,381,3,51,25,0,378,380,3,11,5,0,379,378,1,
        0,0,0,380,383,1,0,0,0,381,379,1,0,0,0,381,382,1,0,0,0,382,385,1,
        0,0,0,383,381,1,0,0,0,384,347,1,0,0,0,384,364,1,0,0,0,385,84,1,0,
        0,0,386,388,3,15,7,0,387,386,1,0,0,0,387,388,1,0,0,0,388,389,1,0,
        0,0,389,394,3,13,6,0,390,393,3,13,6,0,391,393,3,11,5,0,392,390,1,
        0,0,0,392,391,1,0,0,0,393,396,1,0,0,0,394,392,1,0,0,0,394,395,1,
        0,0,0,395,408,1,0,0,0,396,394,1,0,0,0,397,398,3,51,25,0,398,403,
        3,13,6,0,399,402,3,13,6,0,400,402,3,11,5,0,401,399,1,0,0,0,401,400,
        1,0,0,0,402,405,1,0,0,0,403,401,1,0,0,0,403,404,1,0,0,0,404,407,
        1,0,0,0,405,403,1,0,0,0,406,397,1,0,0,0,407,410,1,0,0,0,408,406,
        1,0,0,0,408,409,1,0,0,0,409,411,1,0,0,0,410,408,1,0,0,0,411,412,
        6,42,1,0,412,86,1,0,0,0,17,0,154,182,209,216,349,358,364,374,381,
        384,387,392,394,401,403,408,2,6,0,0,1,42,0
    ]

class TypstGrammarLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    MATH_START = 5
    MATH_END = 6
    WS = 7
    USELESS_SIGN = 8
    L_PAREN = 9
    R_PAREN = 10
    L_BRACE = 11
    R_BRACE = 12
    L_BRACKET = 13
    R_BRACKET = 14
    BAR = 15
    EVAL_BAR = 16
    QUOTE = 17
    UNDERSCORE = 18
    CARET = 19
    SEMICOLON = 20
    COMMA = 21
    PERIOD = 22
    LIM_APPROACH_SYM = 23
    RELATION_OP = 24
    ADDITIVE_OP = 25
    MP_OP = 26
    POSTFIX_OP = 27
    ACCENT_OP = 28
    REDUCE_OP = 29
    FUNC = 30
    FUNC_MAT = 31
    FUNC_LIM = 32
    FUNC_LOG = 33
    FUNC_INTEGRAL = 34
    DIF = 35
    DIFF = 36
    SYMBOL_BASE = 37
    NUMBER = 38
    ID = 39

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'^T'", "'^top'", "'^(T)'", "'^(top)'", "'<typst_math_start>'", 
            "'<typst_math_end>'", "'('", "')'", "'{'", "'}'", "'['", "']'", 
            "'|'", "'\"'", "'_'", "'^'", "';'", "','", "'.'", "'->'", "'<typst_math_accent>'", 
            "'<typst_math_reduce>'", "'<typst_math_func>'", "'<typst_math_mat>'", 
            "'lim'", "'log'", "'integral'", "'dif'", "'diff'", "'<typst_math_symbol_base>'" ]

    symbolicNames = [ "<INVALID>",
            "MATH_START", "MATH_END", "WS", "USELESS_SIGN", "L_PAREN", "R_PAREN", 
            "L_BRACE", "R_BRACE", "L_BRACKET", "R_BRACKET", "BAR", "EVAL_BAR", 
            "QUOTE", "UNDERSCORE", "CARET", "SEMICOLON", "COMMA", "PERIOD", 
            "LIM_APPROACH_SYM", "RELATION_OP", "ADDITIVE_OP", "MP_OP", "POSTFIX_OP", 
            "ACCENT_OP", "REDUCE_OP", "FUNC", "FUNC_MAT", "FUNC_LIM", "FUNC_LOG", 
            "FUNC_INTEGRAL", "DIF", "DIFF", "SYMBOL_BASE", "NUMBER", "ID" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "WS_CHAR", "DIGIT", "LETTER", 
                  "HASHTAG", "MATH_START", "MATH_END", "WS", "USELESS_SIGN", 
                  "L_PAREN", "R_PAREN", "L_BRACE", "R_BRACE", "L_BRACKET", 
                  "R_BRACKET", "BAR", "EVAL_BAR", "QUOTE", "UNDERSCORE", 
                  "CARET", "SEMICOLON", "COMMA", "PERIOD", "LIM_APPROACH_SYM", 
                  "RELATION_OP", "ADDITIVE_OP", "MP_OP", "POSTFIX_OP", "ACCENT_OP", 
                  "REDUCE_OP", "FUNC", "FUNC_MAT", "FUNC_LIM", "FUNC_LOG", 
                  "FUNC_INTEGRAL", "DIF", "DIFF", "SYMBOL_BASE", "NUMBER", 
                  "ID" ]

    grammarFileName = "TypstGrammar.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


    id2type = {}

    def setType(self):
        if self.text in self.id2type:
            if hasattr(self, self.id2type[self.text]):
                self.type = getattr(self, self.id2type[self.text])
            else:
                raise Exception("Unknown ID: " + self.text + " for type " + self.id2type[self.text])
        else:
            raise Exception("Unknown ID: " + self.text)


    def action(self, localctx:RuleContext, ruleIndex:int, actionIndex:int):
        if self._actions is None:
            actions = dict()
            actions[42] = self.ID_action 
            self._actions = actions
        action = self._actions.get(ruleIndex, None)
        if action is not None:
            action(localctx, actionIndex)
        else:
            raise Exception("No registered action for:" + str(ruleIndex))


    def ID_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 0:
            self.setType()
     


